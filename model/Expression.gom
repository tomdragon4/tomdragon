module Expression
imports int String
abstract syntax

Expr = Nombre(i:int)
     | Litteral(name:String)
     | Plus(Expr*)
     | Mult(Expr*)
     | Eq(e1:Expr, e2:Expr)
     | Parenthesis(e:Expr)
     | Sqrt(e:Expr)
     | MoinsU(e:Expr)
     | MoinsB(e1:Expr, e2:Expr)
     | Non (e:Expr)
     | Factorial(e:Expr)
     | Or(e1:Expr, e2:Expr)
     | And(e1:Expr, e2:Expr)
     | Diff(e1:Expr, e2:Expr)
     | Inf(e1:Expr, e2:Expr)
     | Sup(e1:Expr, e2:Expr)
     | Infegal(e1:Expr, e2:Expr)
     | Supegal(e1:Expr, e2:Expr)
     | Divide(e1:Expr, e2:Expr)
     | Power (e1:Expr, e2:Expr)
     | Epsilon()

/*
Rule = Rule (e1: Expr, e2: Expr)
  
module Expression:rules() {
  Plus(Nombre(a), Nombre(b)) -> Nombre(a+b)
  Plus(Nombre(a)) -> Nombre(a)
  
}
*/
