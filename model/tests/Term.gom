module Expression
imports int String
abstract syntax

Exp = Nombre(i:int)
     | Litteral(name:String)
     | BinOpExp(Exp1:Exp,OpB:BinOp,Exp2:Exp)
     | RigthOpExp(Exp1:Exp,ROp:RigthOp)
     | LeftOpExp(LOp:LeftOp,Exp1:Exp)


BinOp = Plus()
     | Mult()
     | Eq()
     | Moins()
     | Divide()
     | Diff()
     | Inf()
     | Sup()
     | Infegal()
     | Supegal()
     | Or()
     | And()
     
RigthOp = Factorial() | Power()
     
LeftOp = Non ()
       | Parenthesis()
       | Sqrt()
       | MoinsU()

module Expression:rules() {
  Nombre(a) -> Nombre(a)
}
