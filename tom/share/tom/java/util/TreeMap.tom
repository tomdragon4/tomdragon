/*
 *
 * Copyright (c) 2006-2013, Universite de Lorraine, Inria
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.  
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the Inria nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 **/

%include { MapEntry.tom }
%include { types/TreeMap.tom }

%oplist TreeMap concTreeMap(MapEntry*) {
  is_fsym(m)       { ($m!= null) && ($m instanceof java.util.TreeMap) }
  make_empty()     { new java.util.TreeMap() }
  make_insert(e,m) { treeMapAppend($e,$m) }
  get_head(m)      { treeMapGetHead($m) }
  get_tail(m)      { treeMapGetTail($m) }
  is_empty(m)      { ($m.size()==0) }
}

private static java.util.TreeMap treeMapAppend(MapEntry e, java.util.TreeMap m) {
  java.util.TreeMap res = (java.util.TreeMap) m.clone();
  res.put(e.getKey(), e.getVal());
  return res;
}

private static MapEntry treeMapGetHead(java.util.TreeMap m) {
  java.util.Set es = m.entrySet();
  java.util.Iterator it = es.iterator();
  java.util.Map.Entry e = (java.util.Map.Entry) it.next();
  return new MapEntry(e.getKey(), e.getValue());
}

private static java.util.TreeMap treeMapGetTail(java.util.TreeMap m) {
  java.util.TreeMap res = (java.util.TreeMap) m.clone();
  java.util.Set es = m.entrySet();
  java.util.Iterator it = es.iterator();
  java.util.Map.Entry e = (java.util.Map.Entry) it.next();
  res.remove(e.getKey());
  return res;
}


