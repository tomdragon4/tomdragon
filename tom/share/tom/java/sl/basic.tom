/*
 *
 * Copyright (c) 2000-2013, Universite de Lorraine, Inria
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the Inria nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **/
%include { int.tom }
%include { string.tom }

%op Strategy mu(s1:Strategy, s2:Strategy) {
  make(var,v) {( new tom.library.sl.Mu($var,$v) )}
}

%op Strategy Mu(s1:Strategy, s2:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.Mu )}
  make(var, v) {( new tom.library.sl.Mu($var, $v) )}
  get_slot(s1, t) {( (tom.library.sl.MuVar)$t.getChildAt(tom.library.sl.Mu.VAR) )}
  get_slot(s2, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Mu.V) )}
}

%op Strategy MuVar(var:String) {
  is_fsym(t) {( $t instanceof tom.library.sl.MuVar )}
  make(name) {( new tom.library.sl.MuVar($name) )}
  get_slot(var, t) {( ((tom.library.sl.MuVar)$t).getName() )}
}

%op Strategy Omega(position:int, s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.Omega )}
  make(pos,v) {( new tom.library.sl.Omega($pos,$v) )}
  get_slot(position, t) {( ((tom.library.sl.Omega)$t).getPos() )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Omega.ARG) )}
}

/*
 * basic operators
 */

%op Strategy Identity() {
  is_fsym(t) {( $t instanceof tom.library.sl.Identity )}
  make() {( new tom.library.sl.Identity() )}
}

%op Strategy One(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.One )}
  make(v) {( new tom.library.sl.One($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.One.ARG) )}
}

%op Strategy All(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.All )}
  make(v) {( new tom.library.sl.All($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.All.ARG) )}
}

%op Strategy IfThenElse(s1:Strategy, s2:Strategy, s3:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.IfThenElse )}
  make(condition,trueCase,falseCase) {( new tom.library.sl.IfThenElse($condition,$trueCase,$falseCase) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.IfThenElse.CONDITION) )}
  get_slot(s2, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.IfThenElse.TRUE_CASE) )}
  get_slot(s3, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.IfThenElse.FALSE_CASE) )}
}

%op Strategy Fail() {
  is_fsym(t) {( $t instanceof tom.library.sl.Fail )}
  make() {( new tom.library.sl.Fail() )}
}

%op Strategy Not(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.Not )}
  make(v) {( new tom.library.sl.Not($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Not.ARG) )}
}

%oplist Strategy Sequence(Strategy*) {
  is_fsym(t) {( $t instanceof tom.library.sl.Sequence )}
  make_empty() { null }
  /*make_insert(head,tail) {( ($tail==null)?$head:tom.library.sl.Sequence.make($head,$tail) )}*/
  make_insert(head,tail) { tom.library.sl.Sequence.make($head,$tail) }
  get_head(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Sequence.FIRST) )}
  get_tail(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Sequence.THEN) )}
  is_empty(t) {( $t == null )}
}

%oplist Strategy Choice(Strategy*) {
  is_fsym(t) {( $t instanceof tom.library.sl.Choice )}
  make_empty() { null }
  /*make_insert(head,tail) {( ($tail==null)?$head:new tom.library.sl.Choice($head,$tail) )}*/
  make_insert(head,tail) { tom.library.sl.Choice.make($head,$tail) }
  get_head(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Choice.FIRST) )}
  get_tail(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Choice.THEN) )}
  is_empty(t) {( $t ==null )}
}

%oplist Strategy ChoiceUndet(Strategy*) {
  is_fsym(t) {( $t instanceof tom.library.sl.ChoiceUndet )}
  make_empty() { null }
  //make_insert(head,tail) {( ($tail==null)?$head:new tom.library.sl.ChoiceUndet($head,$tail) )}
  make_insert(head,tail) { tom.library.sl.ChoiceUndet.make($head,$tail) }
  get_head(t) {( ((tom.library.sl.ChoiceUndet) $t).getHead() )}
  get_tail(t) {( ((tom.library.sl.ChoiceUndet) $t).getTail() )}
  is_empty(t) {( $t ==null )}
}

%oplist Strategy SequenceId(Strategy*) {
  is_fsym(t) {( $t instanceof tom.library.sl.SequenceId )}
  make_empty() { null }
  //make_insert(head,tail) {( ($tail==null)?$head:new tom.library.sl.SequenceId($head,$tail) )}
  make_insert(head,tail) { tom.library.sl.SequenceId.make($head,$tail) }
  get_head(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.SequenceId.FIRST) )}
  get_tail(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.SequenceId.THEN) )}
  is_empty(t) {( $t == null )}
}

%oplist Strategy ChoiceId(Strategy*) {
  is_fsym(t) {( $t instanceof tom.library.sl.ChoiceId )}
  make_empty() { null }
  //make_insert(head,tail) {( ($tail==null)?$head:new tom.library.sl.ChoiceId($head,$tail) )}
  make_insert(head,tail) { tom.library.sl.ChoiceId.make($head,$tail) }
  get_head(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.ChoiceId.FIRST) )}
  get_tail(t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.ChoiceId.THEN) )}
  is_empty(t) {( $t ==null )}
}

%op Strategy OneId(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.OneId )}
  make(v) {( new tom.library.sl.OneId($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.OneId.ARG) )}
}

/*
 * basic probabilistic operators
 */

%op Strategy Pselect(p1:int, p2:int, s1:Strategy, s2:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.Pselect )}
  make(p,q,first,then) {( new tom.library.sl.Pselect($p,$q,$first,$then) )}
  get_slot(p1, t) {( ((tom.library.sl.Pselect)$t).getP() )}
  get_slot(p2, t) {( ((tom.library.sl.Pselect)$t).getQ() )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Pselect.FIRST) )}
  get_slot(s2, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Pselect.THEN) )}
}

%op Strategy OmegaU(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.OmegaU )}
  make(v) {( new tom.library.sl.OmegaU($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.OmegaU.ARG) )}
}

%op Strategy Up(s1:Strategy) {
  is_fsym(t) {( $t instanceof tom.library.sl.Up )}
  make(v) {( new tom.library.sl.Up($v) )}
  get_slot(s1, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.Up.ARG) )}
}
