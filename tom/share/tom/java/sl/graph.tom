/*
 * Copyright (c) 2000-2013, Universite de Lorraine, Inria
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 * 	- Redistributions of source code must retain the above copyright
 * 	notice, this list of conditions and the following disclaimer.  
 * 	- Redistributions in binary form must reproduce the above copyright
 * 	notice, this list of conditions and the following disclaimer in the
 * 	documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the Inria nor the names of its
 * 	contributors may be used to endorse or promote products derived from
 * 	this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%op Strategy AllSeq(s:Strategy) {
    is_fsym(t) {( ($t instanceof tom.library.sl.AllSeq) )}
    make(s) {( new tom.library.sl.AllSeq($s) )}
    get_slot(s,t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.DeRef.ARG) )}
  }
 
  %op Strategy DeRef(s:Strategy) {
    is_fsym(t) {( ($t instanceof tom.library.sl.DeRef) && ((tom.library.sl.DeRef)$t).isRelative()==true && ((tom.library.sl.DeRef)$t).isStrict()==false )}
    make(s) {( tom.library.sl.DeRef.makeRelative($s) )}
    get_slot(s,t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.DeRef.ARG) )}
  }

  %op Strategy StrictDeRef(s:Strategy) {
    is_fsym(t) {( ($t instanceof tom.library.sl.DeRef) && ((tom.library.sl.DeRef)$t).isRelative()==true && ((tom.library.sl.DeRef)$t).isStrict()==true )}
    make(s) {( tom.library.sl.DeRef.makeRelativeStrict($s) )}
    get_slot(s, t) {( (tom.library.sl.Strategy)$t.getChildAt(tom.library.sl.DeRef.ARG) )}
  }

/**
 * This strategy opertor corresponds to temporal operator AU in CTL.
 * Identity() can be interpreted as True and Failure as False
 * It succeeds if s1 is "True" until s2 is "True".
 * @param s1 the first strategy.
 * @param s2 the second strategy.
 */
%op Strategy AUCtl(s1:Strategy, s2:Strategy) {
  make(s1,s2) {( `mu(MuVar("x"),Choice(s2,Sequence(Sequence(s1,All(MuVar("x"))),One(Identity())))) )}
}

%op Strategy EUCtl(s1:Strategy, s2:Strategy) {
  make(s1,s2) {( `mu(MuVar("x"),Choice(s2,Sequence(s1,One(MuVar("x"))))))}
}

%op Strategy TrueCtl() {
  make() {`Identity() }
}

%op Strategy FalseCtl() {
  make() {`Fail() }
}

%op Strategy AndCtl(s1:Strategy, s2:Strategy) {
  make(s1,s2) {`Sequence(s1,s2) }
}

%op Strategy OrCtl(s1:Strategy, s2:Strategy) {
  make(s1,s2) {`Choice(s1,s2)}
}

%op Strategy AFCtl(s:Strategy) {
  make(s) {`AUCtl(Identity(),s) }
}

%op Strategy AGCtl(s:Strategy) {
  make(s) {`TopDown(s) }
}


%op Strategy EFCtl(s:Strategy) {
  make(s) {`EUCtl(Identity(),s) }
}

%op Strategy AXCtl(s:Strategy) {
  make(s) {( `All(s) )}
}

%op Strategy EXCtl(s:Strategy) {
  make(s) {(`One(s) )}
}
