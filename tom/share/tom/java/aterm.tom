/*
 * Copyright (c) 2004-2013, Universite de Lorraine, Inria
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the Inria nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%include { boolean.tom }

%typeterm ATerm {
  implement { aterm.ATerm }
  is_sort(t) { $t instanceof aterm.ATerm }
  equals(t1, t2) { $t1 == $t2 }
}

%typeterm ATermList {
  implement { aterm.ATermList }
  is_sort(t) { $t instanceof aterm.ATermList }
  equals(l1,l2) { $l1==$l2 }
}

%typeterm AFun {
  implement { aterm.AFun }
  is_sort(t) { $t instanceof aterm.AFun }
  equals(t1, t2) { $t1 == $t2 }
}


/* ------ operators ----------- */


/** ATermPlaceholder **/

%op ATerm ATermPlaceholder(type: ATerm ) {
  is_fsym(t) { $t instanceof aterm.ATermPlaceholder }
  make(type) { aterm.pure.SingletonFactory.getInstance().makePlaceholder($type) }
  get_slot(type, t) { ((ATermPlaceholder)$t).getPlaceholder() }
}

/** ATermList **/

%oplist ATerm ATermList (ATerm*) {
  is_fsym(t) { $t instanceof aterm.ATermList }
  make_empty() { aterm.pure.SingletonFactory.getInstance().makeList() }
  make_insert(e,l) { ((ATermList)$l).insert($e) }
  get_head(t) { ((ATermList)$t).getFirst() }
  get_tail(t) { ((ATermList)$t).getNext() }
  is_empty(t) { ((ATermList)$t).isEmpty() }
}

%oplist ATermList concATerm (ATerm*) {
  is_fsym(t) { $t instanceof aterm.ATermList } 
  make_empty() { aterm.pure.SingletonFactory.getInstance().makeList() }
  make_insert(e,l) { $l.insert($e) }
  get_head(t) { $t.getFirst() }
  get_tail(t) { $t.getNext() }
  is_empty(t) { $t.isEmpty() } 
}

/** ATermInt  **/

%op ATerm ATermInt(val: int) {
  is_fsym(t) { $t instanceof aterm.ATermInt }
  make(i) { aterm.pure.SingletonFactory.getInstance().makeInt($i) }
  get_slot(val, t) { ((aterm.ATermInt)$t).getInt() }
}

/** ATermFun **/

%op AFun AFun(name: String, arity: int, quoted: boolean)  {
  is_fsym(t) { $t instanceof aterm.AFun } 
  make(f,a,q) { aterm.pure.SingletonFactory.getInstance().makeAFun($f,$a,$q) }
  get_slot(name, t) { $t.getName() }
  get_slot(arity, t) { $t.getArity() }
  get_slot(quoted, t) { $t.isQuoted() }
}

/** AtermAppl **/

%op ATerm ATermAppl(fun: AFun, args: ATermList  ) {
  is_fsym(t) { $t instanceof aterm.ATermAppl }
  make(f,args) { aterm.pure.SingletonFactory.getInstance().makeAppl($f,$args) }
  get_slot(fun, t) { ((aterm.ATermAppl)$t).getAFun() }
  get_slot(args, t) { ((aterm.ATermAppl)$t).getArguments() }
}
